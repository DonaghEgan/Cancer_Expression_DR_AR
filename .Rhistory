TRUE ~ Malignant_clusters  # Keep other cell types unchanged
)
)
seurat_score@meta.data$response_ot <- paste(seurat_score@meta.data$Response, seurat_score@meta.data$Timepoint)
cell_type_proportions_all <- seurat_score@meta.data %>%
group_by(sample_ID, new_cell_type) %>%
plotly::summarise(Count = dplyr::n()) %>%
mutate(proportion = Count / sum(Count))
proportion_check <- cell_type_proportions_all %>%
group_by(sample_ID) %>%
dplyr::summarise(total_proportion = sum(proportion)) %>%
mutate(is_valid = dplyr::near(total_proportion, 1, tol = 1e-10))
# Aggregate metadata to retain unique sample-level information
seurat_aggregated <- seurat_score@meta.data %>%
group_by(sample_ID) %>%
summarise(across(everything(), first))  # Adjust the summarization logic as needed
prop_meta <- merge(cell_type_proportions_all, seurat_aggregated, by = "sample_ID",
all.x = T)
prop_meta_rs <- prop_meta[prop_meta$new_cell_type.x == "IFNG_RS",]
prop_meta_gs <- prop_meta[prop_meta$new_cell_type.x == "IFNG_GS",]
comp <- list(c("NonResponders BT", "NonResponders OT"),
c("Responders OT", "NonResponders OT"),
c("Responders BT", "NonResponders BT"),
c("Responders BT", "NonResponders OT"),
c("Responders BT", "Responders OT"))
# Example usage with proper parameters
p1 <- plot_boxplot(
prop_meta_rs,
x_var = "response_ot", # Must be quoted string
y_var = "proportion",
y_label = "Cell Population Proportions",
comparisons = comp,
color_pal = c("#4DBBD5FF","#4DBBD5FF","#E64B35FF","#E64B35FF"),
x_labels = c("NonResponders BT" = "NR BT", "NonResponders OT" = "NR OT",
"Responders BT" = "R BT", "Responders OT" = "R OT")
)  + ggtitle("Cells High IFNG.RS:IFNG.GS")
# Example usage with proper parameters
p2 <- plot_boxplot(
prop_meta_gs,
x_var = "response_ot", # Must be quoted string
y_var = "proportion",
y_label = "Cell Population Proportions",
comparisons = comp,
color_pal = c("#4DBBD5FF","#4DBBD5FF","#E64B35FF","#E64B35FF"),
meta_data <- readRDS("data/meta/meta_data.Rds")
## counts + meta_data
counts <- readRDS("Z:/working/GEL_MELANOMA/External_Datasets/HMF_GCP/RNA_seq_processed/OUTPUT/counts.Rds")
# Overlap counts and meta and remove non-assigned samples
meta_data <- meta_data[rownames(meta_data) %in% colnames(counts), ]
meta_data <- meta_data[!meta_data$group == "NA",]
# ConsensusTME output
consensus_tme <- data.frame(t(readRDS("data/processed/consensus_tme.Rds")))
# Unify meta and and patients with rna seq
counts <- counts[, colnames(counts) %in% rownames(meta_data)]
# Define APC and NON_APC
APC_CELLS <- c("Dendritic_cells" , "Monocytes","B_cells",
"Macrophages",  "Macrophages_M1", "Macrophages_M2")
NON_APC_CELLS <- c("Cytotoxic_cells", "Eosinophils", "Mast_cells", "NK_cells","Neutrophils",
"T_cells_CD4", "T_cells_CD8", "T_cells_gamma_delta", "T_regulatory_cells",
"Plasma_cells")
# Average APC and NON_APC
consensus_tme$APC_CELLS <- rowMeans(consensus_tme[, APC_CELLS, drop=FALSE])
consensus_tme$NON_APC_CELLS <- rowMeans(consensus_tme[, NON_APC_CELLS, drop = FALSE])
# Add tme to meta data
meta_tme <- merge(consensus_tme, meta_data, by = 0) %>% column_to_rownames("Row.names")
library(DESeq2); library(tidyverse); library(msigdbr); library(fgsea); library(pheatmap)
library(RColorBrewer); library(readxl); library(writexl); library(ggpubr);library(ggsci)
library(biomaRt);library(openxlsx)
source("src/custom_plots.R")
source("src/analysis_functions.R")
# Add tme to meta data
meta_tme <- merge(consensus_tme, meta_data, by = 0) %>% column_to_rownames("Row.names")
# Scale variables in model
meta_tme_scale <- scale(meta_tme[,c(1:21,48), drop=F])
meta_tme_scale <- merge(meta_tme_scale, meta_tme[,"group", drop =F], by = 0) %>% column_to_rownames("Row.names")
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 10,
min_samples = 40, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Create msigdb objects - Reactome
msigdb_reactome <- msigdbr(species = "human", category = "C2")
msigdb_reactome <- msigdb_reactome[grepl(c("REACTOME"), msigdb_reactome$gs_name),] # reactome
# Create msigdb objects - Hallmarks
msigdb_hallmarks <- msigdbr(species = "human", category = "H") # hallmarks
# Create pathways
pathways_R <- split(x = msigdb_reactome$gene_symbol, f = msigdb_reactome$gs_name)
pathways_H <- split(x = msigdb_hallmarks$gene_symbol, f = msigdb_hallmarks$gs_name)
# Pull and order genes by stat
genes <- result$results %>% pull(stat, gene) %>% sort(decreasing = T)
# Pathway enrichment
fgsea_R_nf_ar <- fgsea::fgseaSimple(pathways = pathways_R, stats = genes, nperm = 100000)
fgsea_H_nf_ar <- fgsea::fgseaSimple(pathways = pathways_H, stats = genes, nperm = 100000)
View(fgsea_H_nf_ar)
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 9,
min_samples = 39, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Create msigdb objects - Reactome
msigdb_reactome <- msigdbr(species = "human", category = "C2")
msigdb_reactome <- msigdb_reactome[grepl(c("REACTOME"), msigdb_reactome$gs_name),] # reactome
# Create msigdb objects - Hallmarks
msigdb_hallmarks <- msigdbr(species = "human", category = "H") # hallmarks
# Create pathways
pathways_R <- split(x = msigdb_reactome$gene_symbol, f = msigdb_reactome$gs_name)
pathways_H <- split(x = msigdb_hallmarks$gene_symbol, f = msigdb_hallmarks$gs_name)
# Pull and order genes by stat
genes <- result$results %>% pull(stat, gene) %>% sort(decreasing = T)
# Pathway enrichment
fgsea_R_nf_ar <- fgsea::fgseaSimple(pathways = pathways_R, stats = genes, nperm = 100000)
fgsea_H_nf_ar <- fgsea::fgseaSimple(pathways = pathways_H, stats = genes, nperm = 100000)
View(fgsea_H_nf_ar)
fgsea_H_nf_ar <- fgsea::fgseaSimple(pathways = pathways_H, stats = genes, nperm = 1000000)
View(fgsea_H_nf_ar)
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 9,
min_samples = 30, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Create msigdb objects - Reactome
msigdb_reactome <- msigdbr(species = "human", category = "C2")
msigdb_reactome <- msigdb_reactome[grepl(c("REACTOME"), msigdb_reactome$gs_name),] # reactome
# Create msigdb objects - Hallmarks
msigdb_hallmarks <- msigdbr(species = "human", category = "H") # hallmarks
# Create pathways
pathways_R <- split(x = msigdb_reactome$gene_symbol, f = msigdb_reactome$gs_name)
pathways_H <- split(x = msigdb_hallmarks$gene_symbol, f = msigdb_hallmarks$gs_name)
# Pull and order genes by stat
genes <- result$results %>% pull(stat, gene) %>% sort(decreasing = T)
# Pathway enrichment
fgsea_R_nf_ar <- fgsea::fgseaSimple(pathways = pathways_R, stats = genes, nperm = 100000)
fgsea_H_nf_ar <- fgsea::fgseaSimple(pathways = pathways_H, stats = genes, nperm = 1000000)
View(fgsea_H_nf_ar)
View(result)
View(result[["results"]])
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 5,
min_samples = 30, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Create msigdb objects - Reactome
msigdb_reactome <- msigdbr(species = "human", category = "C2")
msigdb_reactome <- msigdb_reactome[grepl(c("REACTOME"), msigdb_reactome$gs_name),] # reactome
# Create msigdb objects - Hallmarks
msigdb_hallmarks <- msigdbr(species = "human", category = "H") # hallmarks
# Create pathways
pathways_R <- split(x = msigdb_reactome$gene_symbol, f = msigdb_reactome$gs_name)
pathways_H <- split(x = msigdb_hallmarks$gene_symbol, f = msigdb_hallmarks$gs_name)
# Pull and order genes by stat
genes <- result$results %>% pull(stat, gene) %>% sort(decreasing = T)
# Pathway enrichment
fgsea_R_nf_ar <- fgsea::fgseaSimple(pathways = pathways_R, stats = genes, nperm = 100000)
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 5,
min_samples = 50, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Run deseq analysis
result <- run_deseq_analysis(counts, meta_tme_scale, min_count = 4,
min_samples = 60, comparison = "groupNofailure.tumorPurity",
purity_var = "tumorPurity")
# Create msigdb objects - Reactome
msigdb_reactome <- msigdbr(species = "human", category = "C2")
msigdb_reactome <- msigdb_reactome[grepl(c("REACTOME"), msigdb_reactome$gs_name),] # reactome
# Create msigdb objects - Hallmarks
msigdb_hallmarks <- msigdbr(species = "human", category = "H") # hallmarks
# Create pathways
pathways_R <- split(x = msigdb_reactome$gene_symbol, f = msigdb_reactome$gs_name)
pathways_H <- split(x = msigdb_hallmarks$gene_symbol, f = msigdb_hallmarks$gs_name)
# Pull and order genes by stat
genes <- result$results %>% pull(stat, gene) %>% sort(decreasing = T)
# Pathway enrichment
fgsea_R_nf_ar <- fgsea::fgseaSimple(pathways = pathways_R, stats = genes, nperm = 100000)
fgsea_H_nf_ar <- fgsea::fgseaSimple(pathways = pathways_H, stats = genes, nperm = 100000)
View(fgsea_H_nf_ar)
View(result)
View(result[["results"]])
tmb <- read.delim("data/processed/totMuts_sampleIDs.txt")
# Overlap counts and meta and remove non-assigned samples
meta_data <- meta_data[rownames(meta_data) %in% colnames(counts), ]
meta_data <- meta_data[!meta_data$group == "NA",]
tmb_groups <- merge(meta_data, tmb, by.x = 0, by.y = "SampleID")
tmb_groups$log_TMB <- log10(tmb_groups$TMB)
tmb_groups$group <- factor(tmb_groups$group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
comp <- list(c("Acq_Resistance", "Nofailure"), c("Acq_Resistance", "Primary_Resistance"), c("Nofailure", "Primary_Resistance"))
ggplot(tmb_groups, aes(x=group, y = log_TMB, fill = group)) + geom_boxplot() +
stat_compare_means(comparisons = comp) + theme_classic() +
scale_fill_manual(values = pal_colors) + theme(legend.position = "none") + ylab("Log10(TMB)") + xlab("") +
scale_x_discrete(labels=c("Primary Res","Acquired Res","Durable Rsp")) + geom_point()
pal_colors <- rev(pal_npg()(3)[c(2,1,3)])
ggplot(tmb_groups, aes(x=group, y = log_TMB, fill = group)) + geom_boxplot() +
stat_compare_means(comparisons = comp) + theme_classic() +
scale_fill_manual(values = pal_colors) + theme(legend.position = "none") + ylab("Log10(TMB)") + xlab("") +
scale_x_discrete(labels=c("Primary Res","Acquired Res","Durable Rsp")) + geom_point()
ggplot(tmb_groups, aes(x=group, y = log_TMB, fill = group)) + geom_boxplot() +
stat_compare_means(comparisons = comp, method = "t.test") + theme_classic() +
scale_fill_manual(values = pal_colors) + theme(legend.position = "none") + ylab("Log10(TMB)") + xlab("") +
scale_x_discrete(labels=c("Primary Res","Acquired Res","Durable Rsp")) + geom_point()
library(ggplot2)
library(ggsci)
library(ggpubr)
library(dplyr)
library(readr)
# Define relative paths for reproducibility
tmb_file <- "data/processed/totMuts_sampleIDs.txt"
meta_data_file <- "data/processed/meta_data.txt"
output_dir <- "output/figures"
output_file <- file.path(output_dir, "tmb_groups_hmf.pdf")
# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
message("Created output directory: ", output_dir)
}
# Read Tumor Mutation Burden (TMB) data
tmb <- read_delim(tmb_file, delim = "\t", col_types = cols())
# Read Metadata
meta_data <- read_delim(meta_data_file, delim = "\t", col_types = cols())
meta_data_file <- "/data/meta/meta_data.Rds"
# Define relative paths for reproducibility
tmb_file <- "data/processed/totMuts_sampleIDs.txt"
meta_data_file <- "/data/meta/meta_data.Rds"
# Read Tumor Mutation Burden (TMB) data
tmb <- read_delim(tmb_file, delim = "\t", col_types = cols())
# Read Metadata
meta_data <- readRDS(meta_data_file)
pal_colors <- rev(ggsci::pal_npg("nrc")(3)[c(2, 1, 3)])  # Adjust order as needed
# Define Color Palette
pal_colors <- rev(ggsci::pal_npg("nrc")(3)[c(2, 1, 3)])
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
inner_join(tmb, by = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
# Read Metadata
meta_data <- readRDS(meta_data_file)
meta_data_file <- "/data/meta/meta_data.Rds"
# Read Metadata
meta_data <- readRDS(meta_data_file)
getwd()
meta_data_file <- "/data/meta/meta_data.Rds"
# Read Metadata
meta_data <- readRDS(meta_data_file)
meta_data_file <- "data/meta/meta_data.Rds"
# Read Metadata
meta_data <- readRDS(meta_data_file)
# Define Color Palette
pal_colors <- rev(ggsci::pal_npg("nrc")(3)[c(2, 1, 3)])
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
inner_join(tmb, by = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
View(tmb)
View(meta_data)
# Read Tumor Mutation Burden (TMB) data
tmb <- read_delim(tmb_file, delim = "\t", col_types = cols())
# Read Metadata
meta_data <- readRDS(meta_data_file)
# Define Color Palette
pal_colors <- rev(ggsci::pal_npg("nrc")(3)[c(2, 1, 3)])
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
inner_join(tmb, by = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
left_join(tmb, by = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
dplyr::inner_join(tmb, by = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
# Example processing (adjust based on actual data structure)
tmb_groups <- meta_data %>%
# filter(SampleID %in% colnames(counts)) %>%
filter(group != "NA") %>%
# Merge with TMB data on 'SampleID'
dplyr::inner_join(tmb,by.x = 0,  by.y = "SampleID") %>%
# Calculate log10(TMB) and set factor levels
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
tmb_groups <- meta_data %>%
rownames_to_column(var = "SampleID") %>%  # Add rownames as a column
filter(group != "NA") %>%  # Filter out rows with 'NA' in 'group'
dplyr::inner_join(tmb, by = "SampleID") %>%  # Join on 'SampleID'
# Calculate log10(TMB) and set factor levels for 'group'
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
View(tmb_groups)
View(tmb_groups)
# Define pairwise comparisons for statistical annotations
comparisons <- list(
c("Acq_Resistance", "Nofailure"),
c("Acq_Resistance", "Primary_Resistance"),
c("Nofailure", "Primary_Resistance")
)
ggplot(tmb_groups, aes(x = group, y = log_TMB, fill = group)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7) +  # Boxplot without outliers
geom_jitter(width = 0.2, size = 1.5, alpha = 0.6, color = "black") +  # Jittered data points
stat_compare_means(comparisons = comparisons,
method = "wilcox.test",
label = "p.format",
size = 3) +  # Add p-value annotations
scale_fill_manual(values = pal_colors) +  # Apply custom color palette
theme_classic(base_size = 14) +  # Clean theme with larger base font
theme(
legend.position = "none",  # Remove legend as it's redundant
axis.title.x = element_blank(),  # Remove x-axis title
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12)
) +
labs(
y = expression(Log[10]~"(TMB)"),  # Y-axis label with mathematical notation
x = NULL  # No x-axis label
) +
scale_x_discrete(labels = c("Primary Res", "Acquired Res", "Durable Rsp"))  # Custom x-axis labels
counts_file <- "Z:/working/GEL_MELANOMA/External_Datasets/HMF_GCP/RNA_seq_processed/OUTPUT/counts.Rds"
counts <- readRDS(counts_file)
meta_data <- meta_data[rownames(meta_data) %in% colnames(counts), ]## load data
# Define Color Palette
pal_colors <- rev(ggsci::pal_npg("nrc")(3)[c(2, 1, 3)])
tmb_groups <- meta_data %>%
rownames_to_column(var = "SampleID") %>%  # Add rownames as a column
filter(group != "NA") %>%  # Filter out rows with 'NA' in 'group'
dplyr::inner_join(tmb, by = "SampleID") %>%  # Join on 'SampleID'
# Calculate log10(TMB) and set factor levels for 'group'
mutate(
log_TMB = log10(TMB),
group = factor(group, levels = c("Primary_Resistance", "Acq_Resistance", "Nofailure"))
)
# Define pairwise comparisons for statistical annotations
comparisons <- list(
c("Acq_Resistance", "Nofailure"),
c("Acq_Resistance", "Primary_Resistance"),
c("Nofailure", "Primary_Resistance")
)
ggplot(tmb_groups, aes(x = group, y = log_TMB, fill = group)) +
geom_boxplot(outlier.shape = NA, alpha = 0.7) +  # Boxplot without outliers
geom_jitter(width = 0.2, size = 1.5, alpha = 0.6, color = "black") +  # Jittered data points
stat_compare_means(comparisons = comparisons,
method = "wilcox.test",
label = "p.format",
size = 3) +  # Add p-value annotations
scale_fill_manual(values = pal_colors) +  # Apply custom color palette
theme_classic(base_size = 14) +  # Clean theme with larger base font
theme(
legend.position = "none",  # Remove legend as it's redundant
axis.title.x = element_blank(),  # Remove x-axis title
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12)
) +
labs(
y = expression(Log[10]~"(TMB)"),  # Y-axis label with mathematical notation
x = NULL  # No x-axis label
) +
scale_x_discrete(labels = c("Primary Res", "Acquired Res", "Durable Rsp"))  # Custom x-axis labels
source("src/custom_plots.R")
plot_boxplot(tmb_groups, x_var = group, y_var = log_TMB,
y_label = "Log(10) TMB", comparisons = comparisons,
x_labels =  c("Primary Res", "Acquired Res", "Durable Rsp"),
color_pal = pal_colors)
plot_boxplot(tmb_groups, x_var = group, y_var = log_TMB,
y_label = "Log(10) TMB", comparisons = comparisons,
x_labels =  c("Primary Res", "Acquired Res", "Durable Rsp"),
color_pal = pal_colors)
tmb_plot <- plot_boxplot(data = tmb_groups, x_var = group, y_var = log_TMB,
y_label = "Log(10) TMB", comparisons = comparisons,
x_labels =  c("Primary Res", "Acquired Res", "Durable Rsp"),
color_pal = pal_colors)
tmb_plot <- plot_boxplot(data = tmb_groups, x_var = "group", y_var = log_TMB,
y_label = "Log(10) TMB", comparisons = comparisons,
x_labels =  c("Primary Res", "Acquired Res", "Durable Rsp"),
color_pal = pal_colors)
tmb_plot <- plot_boxplot(data = tmb_groups, x_var = "group", y_var = "log_TMB",
y_label = "Log(10) TMB", comparisons = comparisons,
x_labels =  c("Primary Res", "Acquired Res", "Durable Rsp"),
color_pal = pal_colors)
tmb_plot
pdf("analysis/output/tmb_hmf_groups.pdf", height = 3, width = 3)
pdf("analysis/output/tmb_hmf_groups.pdf", height = 3, width = 3)
tmb_plot
dev.off()
pdf("analysis/output/figures/tmb_hmf_groups.pdf", height = 3, width = 3)
tmb_plot
dev.off()
dev.off()
dev.off()
dev.off()
data<-qread("matrix_object.RDATA")
library(qs)
library(tidyverse)
library(ggplot2)
library(ggpubr)
data<-qread("matrix_object.RDATA")
setwd("Z:/working/GEL_MELANOMA/External_Datasets/HMF_GCP/RNA_seq_processed/spatial")
data<-qread("matrix_object.RDATA")
metadata<-data$metadata
genes_panel<-data$normalised_counts@Dimnames[[2]]
# Info for cells - same order I assume
length(data$normalised_counts[,"TNNC1"])
patient_responses <- read.csv("patient_responses.csv", header=T)
selected_patients<-c("MX350","MX306","MX402","MX116","MX367","MX199")
color_vec<-c("B.cells"="#4393c3",
"Dendritic.cell"="#92c5de",
"Endothelial_cells"="red",
"Epithelial cells"="#bababa",
"Epithelial Cells"="#bababa",
"Fibroblasts"="black",
"Macrophages"="#c2a5cf",
"Mast.cell"="#e7d4e8",
"Monocyte"="#9970ab",
"Neutrophil"="#762a83",
"NK.cell"="#a6dba0",
"Plasma"="#2166ac",
"Plasmablast"="#053061",
"Plasmacytoid.dendritic.cells"="#878787",
"T.cell_CD4"="#7fbc41",
"T.cell.CD8"="#4d9221",
"T.cell.regulatory"="#c51b7d",
"Tumour_cells"="#8c510a")
##### PD patients ######
metadata %>%
filter(patient_id=="MX350") %>%
ggplot(.)+
geom_point(aes(CenterX_global_px, CenterY_global_px,color=cell_type),size=0.2)+
scale_color_manual(values = color_vec)+
theme_bw()
metadata %>%
filter(patient_id=="MX306") %>%
ggplot(.)+
geom_point(aes(CenterX_global_px, CenterY_global_px,color=cell_type),size=0.2)+
scale_color_manual(values = color_vec)+
theme_bw()
##### AR #####
metadata %>%
filter(patient_id=="MX367") %>%
ggplot(.)+
geom_point(aes(CenterX_global_px, CenterY_global_px,color=cell_type),size=0.2)+
scale_color_manual(values = color_vec)+
theme_bw()
metadata %>%
filter(patient_id=="MX199") %>%
ggplot(.)+
geom_point(aes(CenterX_global_px, CenterY_global_px,color=cell_type),size=0.2)+
scale_color_manual(values = color_vec)+
theme_bw()
##### DR #####
metadata %>%
filter(patient_id=="MX402") %>%
ggplot(.)+
geom_point(aes(CenterX_global_px, CenterY_global_px,color=cell_type),size=0.2)+
scale_color_manual(values = color_vec)+
theme_bw()
norm_counts<-data$normalised_counts[,]
t<-cbind.data.frame(cell_type=metadata$cell_type,GZMA=norm_counts[,"GZMA"])
t %>%
group_by(cell_type) %>%
summarise(m=mean(GZMA),
n=sum(GZMA!=0)) %>%
ggplot(.)+geom_point(aes(cell_type,1,size=n,color=m))+
theme_bw()+
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=0.5))
metadata %>%
group_by(fov) %>%
count(cell_type) %>%
pivot_wider(names_from = cell_type,values_from = n) %>%
View
metadata %>%
mutate(HLADPA1=data$normalised_counts[,"HLA-DPA1"],
GZMA=data$normalised_counts[,"GZMA"],
GZMB=data$normalised_counts[,"GZMB"],
STAT3=data$normalised_counts[,"STAT3"],
IFNAR1=data$normalised_counts[,"IFNAR1"]) %>%
filter(fov=="142") %>%
ggplot(.)+
geom_point(aes(CenterX_local_px, CenterY_local_px,color=cell_type))+
# geom_point(aes(CenterX_local_px, CenterY_local_px,color=cell_type,alpha=log10(IFNAR1+0.01)))+
# geom_point(aes(CenterX_local_px, CenterY_local_px,color=cell_type,alpha=IFNAR1))+
theme_bw()
